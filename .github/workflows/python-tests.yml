name: Run JetDL Tests

on:
  push:
    branches:
      - main
      - dev
      - dev2
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test on ${{ matrix.runner }} with Python ${{ matrix.python-version }}
    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.11
          - 3.12
          - 3.13

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm gdb
          sudo apt-get install -y build-essential cmake
          sudo apt-get install -y libopenblas-dev
          sudo apt-get install pybind11-dev

      - name: Install build dependencies (MacOS)
        if: runner.os == 'MacOS'
        run: |
          brew uninstall cmake
          brew install llvm openblas cmake

      - name: Bootstrap vcpkg
        id: vcpkg
        shell: bash # Use bash/zsh even on Windows for simpler command structure
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV                                         

      - name: Install OpenBLAS via vcpkg
        shell: bash
        run: |
          # Use the full path from the previous step, ensuring the correct triplet
          $VCPKG_ROOT/vcpkg install openblas:x64-windows

      - name: Install build dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install llvm cmake
          vcpkg install openblas

      - name: Creating virtual environment for Python
        run: |
          python -m venv .venv

      - name: Updating pip (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          .\.venv\Scripts\Activate.ps1
          python.exe -m pip install --upgrade pip --timeout 1000

      - name: Updating pip (Linux & MacOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python -m pip install -U pip
  
      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt --timeout 1000
      
      - name: Build shared library(s) (Windows)
        run: |
          # Pass the toolchain file to scikit-build-core/CMake
          export SETUPTOOLS_CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
          python -m pip install -e . --timeout 1000
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
        
      - name: Build shared library(s) (Linux & MacOS)
        if: runner.os != 'Windows'
        run: |
          python -m pip install -e . --timeout 100
          
      - name: Run tests
        run: | 
          pytest -v --disable-warnings
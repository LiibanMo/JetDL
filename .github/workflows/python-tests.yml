name: Run JetDL Tests

on:
  push:
    branches:
      - main
      - dev
      - dev2
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test on ${{ matrix.runner }} with Python ${{ matrix.python-version }}
    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.11
          - 3.12
          - 3.13

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} (Linux & MacOS)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Python ${{ matrix.python-version }} (Windows) (x64)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          architecture: 'x64'

      - name: Cache apt packages
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache-1
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      - name: Cache Homebrew packages
        if: runner.os == 'MacOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-cache-1
          restore-keys: |
            ${{ runner.os }}-brew-cache-

      - name: Cache vcpkg
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: ${{ runner.os }}-vcpkg-cache-1
          restore-keys: |
            ${{ runner.os }}-vcpkg-cache-

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm gdb
          sudo apt-get install -y build-essential cmake
          sudo apt-get install -y libopenblas-dev
          sudo apt-get install pybind11-dev

      - name: Install build dependencies (MacOS)
        if: runner.os == 'MacOS'
        run: |
          brew uninstall cmake
          brew install llvm openblas cmake

      - name: Bootstrap vcpkg
        if: runner.os == 'Windows'
        id: vcpkg
        shell: bash
        run: |
          # The logic to clone and bootstrap...
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.bat
          fi
          # Set VCPKG_ROOT env var for subsequent steps
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV
          # Set CMAKE_TOOLCHAIN_FILE env var to automatically link vcpkg packages
          # Use Windows path separator for the CMAKE_TOOLCHAIN_FILE value
          echo "CMAKE_TOOLCHAIN_FILE=$(pwd)/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

      - name: Install dependencies via vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Note: vcpkg.exe is the executable on Windows, not .sh
          $VCPKG_ROOT/vcpkg.exe install openblas:x64-windows

      - name: Verify vcpkg installation
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Simple check to confirm OpenBLAS is installed
          ls -R "$VCPKG_ROOT/installed/x64-windows/lib/openblas.lib"

      - name: Creating virtual environment for Python
        run: |
          python -m venv .venv
        
      - name: Debug Environment Variables
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "VCPKG_ROOT: $VCPKG_ROOT"
          echo "CMAKE_TOOLCHAIN_FILE: $CMAKE_TOOLCHAIN_FILE"
          # Check if the path exists:
          ls "$CMAKE_TOOLCHAIN_FILE"

      - name: Installing `jetdl` & running pytest (Windows)
        if: runner.os == 'Windows'
        # Keep shell: bash for consistent path handling, but use Windows-style 'source' if needed
        shell: bash
        run: |
          source .venv/Scripts/activate # Windows venv activation for bash
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV # Set triplet globally for all subsequent CMake calls
          # CMAKE_TOOLCHAIN_FILE is already set globally in GITHUB_ENV
          python -m pip install -U pip --timeout 1000
          python -m pip install -r requirements.txt --timeout 1000
          # This build command will now use the CMAKE_TOOLCHAIN_FILE correctly
          python -m pip install -e . --timeout 1000 -v 
          pytest tests/ -v --disable-warnings
          
        env:
          # Ensure VCPKG_ROOT is passed from the previous 'Bootstrap vcpkg' step's output
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
          
      - name: Installing `jetdl` & running pytest (Linux & MacOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python -m pip install -U pip --timeout 1000
          python -m pip install -r requirements.txt --timeout 1000
          python -m pip install -e . --timeout 1000
          pytest tests/ -v --disable-warnings
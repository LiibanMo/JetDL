name: Run JetDL Tests

on:
  push:
    branches:
      - main
      - dev
      - dev2
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test on ${{ matrix.runner }} with Python ${{ matrix.python-version }}
    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.11
          - 3.12
          - 3.13

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} (Linux & MacOS)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Python ${{ matrix.python-version }} (Windows) (x64)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          architecture: 'x64'

      - name: Cache apt packages
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache-1
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      - name: Cache Homebrew packages
        if: runner.os == 'MacOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-cache-1
          restore-keys: |
            ${{ runner.os }}-brew-cache-

      - name: Cache vcpkg
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: ${{ runner.os }}-vcpkg-cache-1
          restore-keys: |
            ${{ runner.os }}-vcpkg-cache-

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm gdb
          sudo apt-get install -y build-essential cmake
          sudo apt-get install -y libopenblas-dev
          sudo apt-get install pybind11-dev

      - name: Install build dependencies (MacOS)
        if: runner.os == 'MacOS'
        run: |
          brew uninstall cmake
          brew install llvm openblas cmake

      - name: Bootstrap vcpkg
        if: runner.os == 'Windows'
        id: vcpkg
        # Ensure we use a shell where 'git clone' and 'bootstrap-vcpkg.sh' work
        shell: bash
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
            # Use the Windows bootstrap script since we are on a Windows runner
            ./vcpkg/bootstrap-vcpkg.bat
          fi
          # Set VCPKG_ROOT env var to the absolute path for the subsequent steps
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV

      - name: Install dependencies via vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Note: vcpkg.exe is the executable on Windows, not .sh
          $VCPKG_ROOT/vcpkg.exe install openblas:x64-windows

      - name: Verify vcpkg installation
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Simple check to confirm OpenBLAS is installed
          ls -R "$VCPKG_ROOT/installed/x64-windows/lib/openblas.lib"

      - name: Creating virtual environment for Python
        run: |
          python -m venv .venv

      - name: Installing `jetdl` & running pytest (Windows) with Clang
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # ... (1. Path Conversion & setup - Keep this the same) ...
          VCPKG_ROOT_WIN="${{ env.VCPKG_ROOT }}" 
          VCPKG_ROOT_BASH=$(echo "$VCPKG_ROOT_WIN" | sed -e 's/\\/\//g' -e 's|^\([A-Za-z]\):|/\L\1|')
          VCPKG_DLL_DIR_BASH="$VCPKG_ROOT_BASH/installed/x64-windows/bin"
          VCPKG_DLL_DIR_WIN=$(echo "$VCPKG_DLL_DIR_BASH" | sed -e 's/^\/\([a-z]\)/\U\1:/' -e 's/\//\\/g')

          # 2. Add DLL path to PATH (Keep this for robustness)
          echo "Prepending $VCPKG_DLL_DIR_WIN to PATH for runtime linking."
          echo "$VCPKG_DLL_DIR_WIN" >> $GITHUB_PATH
          
          # 3. Set Environment Variables for CMake/vcpkg
          export VCPKG_DEFAULT_TRIPLET=x64-windows
          export CMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT_BASH/scripts/buildsystems/vcpkg.cmake"
          
          # 4. Activate Venv and Install Dependencies
          source .venv/Scripts/activate 
          python -m pip install -U pip --timeout 1000
          python -m pip install -r requirements.txt --timeout 1000

          # 5. CRITICAL: Force Clang as the Compiler for scikit-build/CMake
          # GitHub Actions runners typically have Clang installed via the MSVC tools.
          # We export the CLANG compiler executable paths.
          # Note: On CI, 'clang-cl' is often found in the PATH already, but explicit pathing is safer.
          CLANG_BIN_PATH="/c/Program Files/LLVM/bin" # Common LLVM install path on Windows
          
          export CC="$CLANG_BIN_PATH/clang-cl.exe"
          export CXX="$CLANG_BIN_PATH/clang-cl.exe"
          
          echo "--- Forcing compilation with Clang-cl (CC=$CC, CXX=$CXX) ---"
          
          # 6. Install the package
          echo "--- Installing editable package ---"
          # scikit-build should now detect clang-cl based on the CC/CXX environment variables
          python -m pip install -e . --timeout 1000 -v 
          
          # 7. Run Pytest
          pytest tests/ -v --disable-warnings
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
          
      - name: Installing `jetdl` & running pytest (Linux & MacOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python -m pip install -U pip --timeout 1000
          python -m pip install -r requirements.txt --timeout 1000
          python -m pip install -e . --timeout 1000
          pytest tests/ -v --disable-warnings
import torch

# Broadcasting Data

without_broadcasting_data = [
    # 1D tensors
    ([0, -1, 2], [3, -2, 1]),  # (3,)
    ([10, 20, 30, 40], [5, 10, 15, 20]),  # (4,)
    # 2D tensors
    ([[0, -1], [2, -3]], [[3, -2], [1, 4]]),  # (2,2)
    ([[10, 20, 30], [40, 50, 60]], [[5, 10, 15], [20, 25, 30]]),  # (2,3)
    # 3D tensors
    (
        [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],
        [[[9, 10], [11, 12]], [[13, 14], [15, 16]]],
    ),  # (2,2,2)
    (
        [[[0, -1], [2, -3], [0, 0]], [[4, -5], [6, -7], [0, 0]]],
        [[[8, -9], [10, -11], [1, 1]], [[12, -13], [14, -15], [1, 1]]],
    ),  # (2,3,2)
    # 4D tensors
    ([[[[1, 2], [3, 4]]]], [[[[5, 6], [7, 8]]]]),  # (1,1,2,2)
    (
        [[[[[10, 20], [30, 40]]], [[[50, 60], [70, 80]]]]],
        [[[[5, 10], [15, 20]]], [[[25, 30], [35, 40]]]],
    ),  # (2,1,2,2)
]

broadcasting_data = [
    # 2D, 1D broadcasting
    ([[1, 2, 3], [4, 5, 6]], [1, 2, 3]),  # (2,3) + (3,)
    ([1, 2, 3], [[1], [2], [3]]),  # (3,) + (3,1)
    # Higher dimensions
    ([[[1, 2, 3]], [[4, 5, 6]]], [1, 2, 3]),  # (2,1,3) + (3,)
    ([[[1]], [[2]]], [1, 2, 3]),  # (2,1,1) + (3,)
]


# Broadcasting IDs

without_broadcasting_ids = [
    "1D: (3,)",
    "1D: (4,)",
    "2D: (2,2)",
    "2D: (2,3)",
    "3D: (2,2,2)",
    "3D: (2,3,2)",
    "4D: (1,1,2,2)",
    "4D: (2,1,2,2)",
]

# addition

add_broadcasting_ids = [
    "2D + 1D",
    "1D + 2D",
    "3D + 1D: Normal Case",
    "3D + 1D: Special Case",
]

# subtraction

sub_broadcasting_ids = [
    "2D - 1D",
    "1D - 2D",
    "3D - 1D: Normal Case",
    "3D - 1D: Special Case",
]

# multiplication

mul_broadcasting_ids = [
    "2D * 1D",
    "1D * 2D",
    "3D * 1D: Normal Case",
    "3D * 1D: Special Case",
]

# division

div_broadcasting_ids = [
    "2D / 1D",
    "1D / 2D",
    "3D / 1D: Normal Case",
    "3D / 1D: Special Case",
]

# matmul

matmul_data = [
    # 1D @ 1D
    ([1, 2, 3], [4, 5, 6]),
    ([1], [2]),
    # 1D @ 2D
    ([1, 2, 3], [[4, 5], [6, 7], [8, 9]]),
    ([1, 1], [[1], [1]]),
    # 1D @ 3D
    ([1, 2], [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]),
    ([1], [[[1]]]),
    # 2D @ 1D
    ([[1, 2], [3, 4]], [5, 6]),
    ([[1, 2], [3, 4]], [1, 1]),
    # 2D @ 2D
    ([[1, 2], [3, 4]], [[5, 6], [7, 8]]),
    ([[1, 0], [0, 1]], [[5, 6], [7, 8]]),
    # 2D @ 3D
    ([[1, 2], [3, 4]], [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]),
    ([[1, 2]], [[[1, 2], [3, 4]]]),
    # 3D @ 1D
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [1, 1]),
    ([[[1, 2]]], [3, 4]),
    # 3D @ 2D
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]], [[1, 2], [3, 4]]),
    ([[[1, 0], [0, 1]], [[1, 1], [1, 1]]], [[2, 3], [4, 5]]),
    # 3D @ 3D
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]),
    ([[[1, 0], [0, 1]], [[1, 1], [1, 1]]], [[[1, 0], [0, 1]], [[1, 1], [1, 1]]]),
]

matmul_ids = [
    "1D @ 1D: Normal Case",
    "1D @ 1D: Edge Case",
    "1D @ 2D: Normal Case",
    "1D @ 2D: Edge Case",
    "1D @ 3D: Normal Case",
    "1D @ 3D: Edge Case",
    "2D @ 1D: Normal Case",
    "2D @ 1D: Edge Case",
    "2D @ 2D: Normal Case",
    "2D @ 2D: Edge Case",
    "2D @ 3D: Normal Case",
    "2D @ 3D: Edge Case",
    "3D @ 1D: Normal Case",
    "3D @ 1D: Edge Case",
    "3D @ 2D: Normal Case",
    "3D @ 2D: Edge Case",
    "3D @ 3D: Normal Case",
    "3D @ 3D: Edge Case",
]

# T & mT

# tensor.size = 24
shapes_for_T_mT = [
    [1, 24],
    [2, 12],
    [2, 2, 6],
    [2, 2, 2, 3],
    [2, 3, 4],
    [3, 8],
    [3, 2, 4],
    [4, 6],
    [6, 4],
    [8, 3],
    [12, 2],
    [24, 1],
]

shapes_for_T_ids = [
    "T: (1, 24)",
    "T: (2, 12)",
    "T: (2, 2, 6)",
    "T: (2, 2, 2, 3)",
    "T: (2, 3, 4)",
    "T: (3, 8)",
    "T: (3, 2, 4)",
    "T: (4, 6)",
    "T: (6, 4)",
    "T: (8, 3)",
    "T: (12, 2)",
    "T: (24, 1)",
]

shapes_for_mT_ids = [
    "mT: (1, 24)",
    "mT: (2, 12)",
    "mT: (2, 2, 6)",
    "mT: (2, 2, 2, 3)",
    "mT: (2, 3, 4)",
    "mT: (3, 8)",
    "mT: (3, 2, 4)",
    "mT: (4, 6)",
    "mT: (6, 4)",
    "mT: (8, 3)",
    "mT: (12, 2)",
    "mT: (24, 1)",
]


# reduction operations (i.e. sum(), mean(), max(), etc.)

reduction_operations_data = [
    ([1, 2, 3, 4], None),
    ([1, 2, 3, 4], 0),
    ([[1, 2], [3, 4]], None),
    ([[1, 2], [3, 4]], 0),
    ([[1, 2], [3, 4]], 1),
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], None),
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 0),
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1),
    ([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 2),
]


sum_ids = [
    "1D: sum(axis=None)",
    "1D: sum(axis=0)",
    "2D: sum(axis=None)",
    "2D: sum(axis=0)",
    "2D: sum(axis=1)",
    "3D: sum(axis=None)",
    "3D: sum(axis=0)",
    "3D: sum(axis=1)",
    "3D: sum(axis=2)",
]
